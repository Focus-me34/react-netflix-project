DONE - organise movie lists
DONE - setup local storage to be able to retrieve the list of movies



DONE - Favourite: Enable the interaction with the database.
DONE - Check rails if everything is handled properly.
DONE - Make sure everything is fine with the movie slice.
DONE - Use the status of the fetch to display appropriate content.
DONE - Portal movie description in the movie section.
DONE - Close Backdrop modal when clicking on it

DONE - Simplify / REFACTOR the whole code base


DONE - Create new page for watch list and add link to the navbar.

DONE - Create watchlist slice? (NO. same as movie)
DONE - Add route + link for watchlist

- WatchlistPage X => Watchlists X => WatchlistList => Watchlist


DONE - WatchlistPage:
  DONE - Render "Watchlists component"

- Watchlists:
  DONE - Layout
  DONE - Get all needed data to pass as props
  DONE - Handle add / remove from watchlist


- WatchlistForm to get further information about which watchlist the user wants
to ad a movie to. (New ? Existing?)
  DONE - Add watchlist button to display / remove form modal with state "isAddingWatchList"
  DONE - Feature to add movie to watchlist
  DONE - Feature to remove movie from watchlist
  DONE - Input validation for the name of the new watchlist
  DONE - Modal Watchlist close icon to add


  NO NEED - Attach reducers to Formik handlers to interact with rails DB
  NO NEED (- Implement Formik API to handle forms)

- Reviews
  - Give the possibility for users to review a whole watchlist. Any user can review any watchlist
  - Create watchlists index in rails + view
  - More to come here...






- Random movie from watchlist suggestion
- Make navbar shrink
- Add more comments


- TESTING (Framework ? (JEST))
- PRODUCTION (Heroku Rails + react and see how it all works together)





- PAGINATION:
As soon as we build an endpoint that returns a list of items pagination should be put in place.
Collections usually grow overtime thus it is important to always return a limited and controlled amount of elements.
It is fair to let API consumers choose how many objects to get but is always good idea to predefine a number and have a maximum for it.
The main reason for this being that it will be very time and bandwidth consuming to return a huge array of data.
